#+STARTUP: overview
* TODO [#A] kernel bug修复
  SCHEDULED: <2019-09-26 Thu>
  - [2019-09-26 Thu] [capture]
    现象:
    1. Attemper 重复启动
    2. [socker::server, socker::client]回调覆盖?

    校验点:
    1. [timer, socket::server, socket::client]回调的函数名字都是一样的
       会不会 回调函数 被 覆盖??
    2. [timer, socket::server, socket::client]不应该操控回调对象

    猜测原因:
    1. attemper中没有继承并实现 [timer, socket::server, socket::client]的回调

* TODO [#C] C-c C-f选择book之后,不要显示book的描述buffer
  - [2019-09-26 Thu] [refile]
  - [2019-09-26 Thu] [refile]
  - [2019-09-25 Wed] [capture]
* TODO [#C] dot使用
  - [2019-09-25 Wed] [refile]
  - [2019-09-25 Wed] [capture]
    1. [ ] dot语法高亮
    2. [ ] org-mode中增加对dot语法的执行
* TODO [#C] GUD中 watch buffer需要手动调用speedbar-refresh才能刷新
  - [2019-09-25 Wed] [refile]
  - [2019-09-24 Tue] [refile]
  - [2019-09-24 Tue] [refile]
  - [2019-09-24 Tue] [refile]
  - [2019-09-24 Tue] [refile]
  - [2019-09-23 Mon] [refile]
  - [2019-09-06 Fri] [refile]
  - [2019-09-06 Fri] [refile]
  - [2019-09-06 Fri] [refile]
  - [2019-08-01 Thu] [capture]
  
* TODO [#C] js环境
  SCHEDULED: <2019-09-24 Tue>
  - [2019-09-24 Tue] [capture]
    1. web环境
    2. emacs环境配置
* TODO [#C] ox-twbs
  - [2019-09-06 Fri] [refile]
  - [2019-09-06 Fri] [capture]
    org 生成html时候的js, 可以在右侧生成导航
* TODO [#C] 数据库 以及 数据库引擎
  SCHEDULED: <2019-09-25 Wed>
  - [2019-09-25 Wed] [capture]
    1. [X] 完成数据库的启动
    2. [ ] 完成数据库引擎与数据库的交互
* TODO [#C] 语言对比
  - [2019-09-23 Mon] [capture]
    
    | 语言       | 优点               | 缺点             | 适用场景       | 自己使用场景   |
    |------------+--------------------+------------------+----------------+----------------|
    | C          | 1.高效             | 1.过程性编程     | 服务器底层     | 服务器底层部分 |
    |            | 2.其他语言支持广泛 | 2.类少           |                |                |
    |------------+--------------------+------------------+----------------+----------------|
    | C++        | 1.库多             | 1.繁琐           | 1.底层         | 1.业务逻辑     |
    |            | 2.面向对象等思想   | 2.编译器错误提示 | 2.部分业务逻辑 |                |
    |------------+--------------------+------------------+----------------+----------------|
    | lisp       | 演算能力强大       | 1.缺少统一标准   | 人工智能?      | emacs函数      |
    |            |                    | 2.库少           |                |                |
    |------------+--------------------+------------------+----------------+----------------|
    | javaScript | 1.web上的编程语言  |                  | web            | web            |
    |------------+--------------------+------------------+----------------+----------------|
* TODO emacs跳转到标准库头文件
  - [2019-08-13 Tue] [capture]
* PROJECT [#A] 企业形象搭建                                       :important:
** DONE 1. 钉钉
   使用功能:
   1. 公司座机 -- 智能办公电话
** DONE 2. 对公账户						       :民生银行:
** DONE 3. 企业支付宝账号认证 						:支付宝:
** DONE 4. 淘宝账号认证
   企业营业执照 只能 绑定一个淘宝账号
     
   现在的企业淘宝账号已经被冻结.
   且无法解封, 无法注销, 甚至无法登录.
     
   而企业营业执照 也无法再重新申请一个淘宝账号.
   所以该企业淘宝账号已经作废. 无法再操作

   替代方案:
   使用个人店铺 代替 企业店铺
   个人觉得影响不大. 如果业务不大, 个人与企业影响不大; 如果业务很大, 也就不需要再借助淘宝了.

** 5. 淘宝店铺 装修
** 6. 微信开放平台
   1. [X] 开放者资质认证
   2. [X] 移动应用申请
   3. [ ] 微信支付接口申请
** 7. 微信公众平台
   1. [X] 微信绑定实名认证的银行卡
   2. [X] 申请微信公众服务号
   3. [ ] 微信支付接口申请
** 8. 支付宝开放平台
** DONE 9. ICP域名备案
   CLOSED: [2017-12-07 Thu 12:37]
* PROJECT [#A] 棋牌项目优化
** 搭建演示平台
   1. [ ] 默认头像存储在本地
   2. [X] 网络问题
   3. [ ] 点击头像, 个人中心界面会闪烁
   4. [ ] 出一个新版本
** 申请app store
** 打广告放出去
** 服务端
   1. GameServer工程中 获取本机ip地址
      现在是在Define.h中手动处理, 如何更改为自动获取
      这样可以避免不同服务器, 都需要编译frame工程
   2. 子游戏dll的 NodeID
      现在子游戏中KindID是手动写死的 -- 这个没有问题
      但是NodeID 能不能写到配置文件中获取
      这样可以避免不同服务器, 都需要编译子游戏
   3. Log日志
      协调服的log日志  还可以
      登录服的log日志  还可以
      游戏服的log日志  还可以
      子游戏的log日志  需要重新设计
   4. 错误诊断
      现在的错误诊断是通过打印 具体的文字 来直观查看的
      希望能改成以下格式
      时间 + 错误标志ret + 函数名 + 文件名 + 行数
** 客户端
   1. 消息号的整理
      删除无用消息号, 比如之前老大厅的牌友圈
   2. sdk的整理
      sdk文件重新整理, 删除无用的socket文件
   3. 底层函数的封装
      比如socket相关函数等
   4. 子游戏代码整理
   5. 界面的优化处理
      图集的优化
   6. 子游戏如何与大厅分离
   7. UGUI 与 NGUI的统一


