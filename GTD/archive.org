#+STARTUP: overview
* ***********待归档*************
* 项目应用
** Java的一些基础
*** Activity
    Activity是 java中类的实例化
    
    activity存在于一些堆栈中, 似于线程的操作

    Activity必须在mainfest.xml中进行注册，才可以启动

    oncreate -- onstart -- onresume -- stop

    activity有显示启动和隐式启动
    
*** AndroidMainFest.xml
    类似于activity管理器的配置文件

    决定了哪个activity先启动， 决定了哪些activity可以启动
    
    inter-filter决定了activity是否是main activity，也决定了activity在什么情形下可以隐式启动
   
** shareSDK指导文档
*** 基本说明
    shareSDK是第三方插件(如果把微信,QQ等比作第一方), 其集成了很多平台, 可以实现快速接入

*** 操作步骤
    1. 在官网下载对应的SDK包
       包里面有Android工程 和 U3D(如果sdk是针对u3d)工程
    2. 编译Android工程, 为自己的U3D工程添加插件
       Android工程的编译目标是U3D的插件
    3. 在自己的U3D工程中 导入并修改官方的u3d Demo
    4. 完成

*** F&Q
    1. 问: 官方的android工程打不开?
       答: 根据不同的IDE, 有不同注意事项
       1) Eclisp IDE的时候, compiler和jdk版本要匹配
       2) Android stutio, 需要将工程import import
         官方的android工程是Eclisp的, 需要转换
    2. 问: Android Stutio如何编译官方的android工程?
       答: Android Stutio编译的时候需要有以下几个注意点
       1) 编译器gradlew版本
	  1) 修改工程下gradle/wrapper/gradle-wrapper.properties文件中的distributionUrl版本为4.1
	  2) 修改工程下build.gradle文件中的classpath版本为4.1 -- 只影响gradlew指令, 不修改也可以
       2) app文件的taget从app改为android module
	  1) 修改工程下app/built.gradle文件中的plugin为apply plugin: 'com.android.library'
	  2) 删除工程下app/built.gradle文件中的applicationId -- 仅当application才有
       3) app文件的taget sdk版本修改
	  1) 修改工程下app/built.gradle文件中的compileSdkVersion和targetSdkVersion为21 (与安装的sdk版本匹配)
	  2) 修改工程下app/src/main/AndroidManifest.xml中的targetSdkVersion为21
	  3) 以上的sdk版本 应当与u3d编译时的选项一致
       4) app文件依赖性修改
	  修改工程下app/built.gradle文件中的dependence为implementation
	  具体原因, 详见Android Stutio的六种编译方式
       5) 包名的修改
	  1) 修改工程下app/src/main/Androidmanifest.xml中的manifest以及微信登录字段中的包名为your包名
	  2) 修改工程下app/src/main/java/cn/share/demo下的所有文件的包名前缀替换为your包名 -- 不需要修改目录名字
       6) 认证资质的修改
	  修改工程下app/src/main/Androidmanifest.xml中application字段中的Mob-AppKey和Mob-AppSecret为自己的
       7) rebuilt-project 完成
	  其余的东西无需改动；
	  生成的aar包在工程下app/build/outputs/aar/app-debug.aar；
	  生成的jar包在工程下app/build/intermidiates/bundles/debug/classes.jar
    3. 问: 自己的U3D工程如何与官方demo结合编译?
       答: 自己的U3D工程编译有以下几个注意点
       1) shareSDK插件的导入
	  1) 双击官方U3D工程中的ShareSDKForU3D.unitypackage (其实际就是将官方U3D工程下的Assets/Plugins导入到自己的U3D下)
	     不要导入demo.cs和ShareSDK-Unity.unity以及Plugins/Android/ShareSDK/DemoCallback.jar
	  2) 导入的时候需要注意路径问题, 比如正常的是Pligins/Android/ShareSDK/xml | libs | res, 千万不能写作Plugins/Android/xml
	     否则, 会导致自己U3D工程打包后没有图像...因为路径错了
	  3) 建议先删除自己的Plugins目录, 然后执行动作1)， 然后再将自己差异化的插件导入(注: 将android studio工程中lib下的jar包全部导入)
	  4) 将Android工程生成的classes.jar改名为com.quyou.tielinmajang.jar并copy到自己U3D工程下的Plugins/Android/ShareSDK/libs/
	  5) 将Android工程下AndroidManifest.xmlcopy到自己U3D工程下的Plugins/Android/ShareSDK/
       2) 修改资质认证
	  1) 官方的资质认证
	     1) Plugins/ShareSDK/ShareSDK.cs 有1处。 位置在成员变量处
	     2) Plugins/ShareSDK/ShareSDKConfig.cs 有1处。 位置在Config函数中
	  2) 微信登录的资质认证
	     1) Plugins/ShareSDK/ShareSDKDevInfo.cs 有1处。 位置在微信登录的函数中
       3) 选择使用平台
	  修改 Plugins/ShareSDK/ShareSDKDevInfo.cs 的成员变量。 不需要的平台直接注释相应的成员变量即可
       4) 调用ShareSDK的脚本文件
	  1) 官方的demo写的比较乱, 不推荐
	  2) 高手可以自己写
	  3) 可以直接使用之前的人写的 AuthAndShare.cs
       5) 将ShareSDK.cs和AuthAndShare.cs挂在控件上。 U3D基本功, 不详述, 只想吐槽
       6) 选择keyStore 编译。 完成
	  keystroe只影响签名
	  使用包名A,生成的apk其签名 应该与在微信开放平台上的包名A的签名一致

    4. 问题解答
       1) 问: U3D打包的时候出现 can't convert class to index
	  答: jar包问题, 排查jar包的依赖型是否都存在， 执行问题3中的1)中的3)
	  
*** 大坑
    1. 分享的content中 image url必须存在， 无论本地还是远端
       否则, 微信分享会调用失败
    2. shareSDK的脚本中的 byPass Approve 必须去掉勾选
       不勾选, 分享的webpage可能变为图片(应用信息)
	     
** 魔窗sdk接入
   :PROPERTIES:
   :ARCHIVE_TIME: 2017-12-30 Sat 13:16
   :ARCHIVE_FILE: ~/GTD/inbox.org
   :ARCHIVE_CATEGORY: inbox
   :END:
*** 魔窗简介
    一键入局
*** 流程
   1. 包名修改
      1) web控制后台
	 注意此处的包名 应该与微信的包名一致
      2) 代码的AndroidMainfest.xml 1处修改
      3) 工程下mlink_demo/src/java/main SplashActivity共1处
	 MainActivity 与 SecondActivity并没有使用到
   2. mlink key的修改
      1) web控制后台 2处修改
	 1) 假设web后台中的key 为tielingmajiang
	 2) 则在后台的url中应该写入 tielingmajiang?key1=:key1&key2=:key2
	    前面的tielingmajiang应该与key一致。?之后的为动态参数
      2) 跳转页面代码
	 已舍弃:_在注册函数register()中的key应该与web控制后台中的一致  1处修改_
	 最新版:不需要在 register()中修改, 只要修改 MlinkRouter即可
   3. 动态参数的修改
      1) web后台的配置  1处
	 1) URL中需要配置 为 XXX?key1=:key1&key2=:key2
      2) 跳转界面代码中的解析 1

* DONE [#A] 文档整理
  CLOSED: [2019-09-11 Wed 09:30]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-11 Wed 09:30
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-11 Wed] [done]
  - [2019-09-06 Fri] [refile]
  - [2019-09-06 Fri] [capture]
** 使用org-info整理emacs
** hexo中内嵌org-info的连接
** 文档整理

* DONE [#B] org-info.js 如何导出所有org-file, 而不是一个个导出
  CLOSED: [2019-09-16 Mon 20:55]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-16 Mon 20:55
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-16 Mon] [done]
  - [2019-09-05 Thu] [capture]

* DONE [#C] figlet使用指南
  CLOSED: [2019-09-16 Mon 21:05]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-16 Mon 21:05
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-16 Mon] [done]
  - [2019-09-16 Mon] [refile]
  - [2019-09-16 Mon] [refile]
  - [2019-09-15 Sun] [capture]
    学习如何配置figlet

* DONE [#C] org-mode把_当做了下标处理
  CLOSED: [2019-09-19 Thu 09:23]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-20 Fri 11:34
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-19 Thu] [done] \\
    #OPTION: ^:nil
  - [2019-09-15 Sun] [capture]
    org-mode把_当做了下标处理, 导致输出为html的时候, 很多地方显示错误



* DONE [#C] socket数据接收(windows下 或 原生)
  CLOSED: [2019-09-24 Tue 11:55] SCHEDULED: <2019-09-24 Tue>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-24 Tue 11:55
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-24 Tue] [done]
  - [2019-09-24 Tue] [capture]
    

* DONE [#C] 加解密
  CLOSED: [2019-09-24 Tue 17:33] SCHEDULED: <2019-09-24 Tue>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-24 Tue 17:33
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-24 Tue] [done] \\
    删除加密
    1) 导致代码复杂, 难以维护
    2) 加密key 依赖于包, 非常容易导致失败
  - [2019-09-24 Tue] [capture]
    

* DONE [#A] kernel bug修复
  CLOSED: [2019-09-28 Sat 23:34] SCHEDULED: <2019-09-26 Thu>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-28 Sat 23:34
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-28 Sat] [done]
  - [2019-09-26 Thu] [capture]
    现象:
    1. Attemper 重复启动
    2. [socker::server, socker::client]回调覆盖?

    校验点:
    1. [timer, socket::server, socket::client]回调的函数名字都是一样的
       会不会 回调函数 被 覆盖??
    2. [timer, socket::server, socket::client]不应该操控回调对象

    猜测原因:
    1. attemper中没有继承并实现 [timer, socket::server, socket::client]的回调


* DONE [#C] windows socket编程问题
  CLOSED: [2019-09-29 Sun 22:41] SCHEDULED: <2019-09-28 Sat>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-29 Sun 22:42
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-09-29 Sun] [done]
  - [2019-09-28 Sat] [capture]

* DONE [#C] mac增加 截图 && gif功能
  CLOSED: [2019-10-02 Wed 23:57] SCHEDULED: <2019-10-02 Wed>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-02 Wed 23:57
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-02 Wed] [done]
  - [2019-10-02 Wed] [capture]
  可以参阅 github star上的项目
  增加截图 && gif功能

* DONE [#C] C-c C-f选择book之后,不要显示book的描述buffer
  CLOSED: [2019-10-03 Thu 13:20]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-03 Thu 13:20
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-03 Thu] [done]
  - [2019-10-02 Wed] [refile]
  - [2019-10-02 Wed] [refile]
  - [2019-09-28 Sat] [refile]
  - [2019-09-26 Thu] [refile]
  - [2019-09-26 Thu] [refile]
  - [2019-09-25 Wed] [capture]

* DONE [#C] 语言对比
  CLOSED: [2019-10-03 Thu 13:21]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-03 Thu 13:21
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-03 Thu] [done]
  - [2019-09-23 Mon] [capture]
    
    | 语言       | 优点               | 缺点             | 适用场景       | 自己使用场景   |
    |------------+--------------------+------------------+----------------+----------------|
    | C          | 1.高效             | 1.过程性编程     | 服务器底层     | 服务器底层部分 |
    |            | 2.其他语言支持广泛 | 2.类少           |                |                |
    |------------+--------------------+------------------+----------------+----------------|
    | C++        | 1.库多             | 1.繁琐           | 1.底层         | 1.业务逻辑     |
    |            | 2.面向对象等思想   | 2.编译器错误提示 | 2.部分业务逻辑 |                |
    |------------+--------------------+------------------+----------------+----------------|
    | lisp       | 演算能力强大       | 1.缺少统一标准   | 人工智能?      | emacs函数      |
    |            |                    | 2.库少           |                |                |
    |------------+--------------------+------------------+----------------+----------------|
    | javaScript | 1.web上的编程语言  |                  | web            | web            |
    |------------+--------------------+------------------+----------------+----------------|

* DONE [#C] 数据库 以及 数据库引擎
  CLOSED: [2019-10-03 Thu 16:59] SCHEDULED: <2019-09-25 Wed>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-03 Thu 16:59
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-03 Thu] [done]
  - [2019-09-25 Wed] [capture]
    1. [X] 完成数据库的启动
    2. [ ] 完成数据库引擎与数据库的交互

* DONE [#C] 确认emacs.git, blog.git是否有提交到github上面
  CLOSED: [2019-10-05 Sat 13:36] SCHEDULED: <2019-10-02 Wed 21:00>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-05 Sat 13:36
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-05 Sat] [done]
  - [2019-10-02 Wed] [capture]
    

* DONE [#C] 安装git gui软件
  CLOSED: [2019-10-05 Sat 15:27] SCHEDULED: <2019-10-05 Sat>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-05 Sat 15:27
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-05 Sat] [done] \\
    使用 magit in emacs
  - [2019-10-05 Sat] [capture]

* DONE [#C] 安装对比软件 
  CLOSED: [2019-10-05 Sat 15:27] SCHEDULED: <2019-10-05 Sat>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-05 Sat 15:27
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-05 Sat] [done] \\
    使用magit in emacs
  - [2019-10-05 Sat] [capture]

* DONE [#C] 完成端口
  CLOSED: [2019-10-06 Sun 00:18]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-06 Sun 00:18
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-06 Sun] [done]
  :LOGBOOK:
  CLOCK: [2019-10-05 Sat 16:44]
  :END:
  - [2019-10-05 Sat] [capture]

* DONE [#C] macos 恢复 自带软件
  CLOSED: [2019-10-06 Sun 02:15] SCHEDULED: <2019-10-05 Sat>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-06 Sun 02:15
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-06 Sun] [done]
  - [2019-10-05 Sat] [capture]
    

* DONE [#C] 日历 软件配置完成
  CLOSED: [2019-10-06 Sun 14:48] SCHEDULED: <2019-10-05 Sat>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-06 Sun 14:48
  :ARCHIVE_FILE: ~/GTD/task.org
  :ARCHIVE_CATEGORY: task
  :ARCHIVE_TODO: DONE
  :END:
  - [2019-10-06 Sun] [done]
  - [2019-10-05 Sat] [capture]
