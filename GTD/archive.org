#+STARTUP: overview
* ***********软件***************
* Emacs
** org       -mode
*** 特性: habit
    1. habit到了指定time, 没有appt的提示????
       解决方案:
       1) org-mode自身是不带appt功能的,需要借助emacs的appt功能
          org-mode中有个function org-agenda-to-appt,可以实现上面的要求
       2) 每次在agenda中增加todo-items(有timestamp)时候,需要将其注册到appt中
	  在org-mode中添加有timestamps的todo-items不会自动触发appt的事件,需要手动完成
	  这个是借助agenda中的rebuilding事件来做到刷新appt事件的
	  具体的实现查看emacs配置文件
	  (dir) - Org mode - Agenda view - Built_in agenda views -Weekly/daily agenda

*** 特性: appt
    org-mode自身是不带appt功能的, 使用的emacs自带的appt

    1. 如何增加appointment
       解决方案:
       (app-add message)
       只是临时增加, 关闭emacs会使appt失效
       (可以写进.emacs, 冒充永久appt)

    2. 如何查看appointment list?
       解决方案:
       使用appt-delete算是变相的实现了
       虽然无法以list形式显示,
       但是会以时间排序,逐个显示
       虽不完美, 但足以~
*** 特性: MobileOrg
    方案流程
     1. PC端配置MobileOrg
       	具体见.emacs
     2. 寻找WebDAV server
       	现在使用的是坚果云
     3. curl同步PC端到webDAV server
       	这一块非常纠结
       	起初使用的ssh的scp,发现scp貌似不支持https?
       	后来使用了curl, 结果发现curl不支持目录的上传.....
       	导致.emacs中mobileorg的配置十分难看, 有机会应该改掉这块!
       	方法有2:
       	1) 换一种工具取代curl  -- 更倾向于这一种方式
       	2) 使用regular expression -- 貌似curl支持的不好


    总览图

     +-----------+ push	       	+--------------+
     | PC端      |-------------->| WwbDAV server|
     |           |<--------------|              |
     +-----------+ pull	       	+--------------+
       	       	       	       	       | 	  ^ |
       	       	       	       	       | 	    |
       	       	       	       	       | 	    |
				       v	  |
                                 +--------------+
 			       	 | Mobile       |
                                 |              |
                                 +--------------+

*** ************************************************************
*** 语法: time-stamp选择
    添加time-stamp时, 不要在calendar中移动,效率太低
    使用以下2种方式即可:
    1. 使用简约的时间格式
       17-1-1  => 2017-01-01
    2. 使用时间间隔
       now = [2016-12-28 Wed]
       +1d  => 2016-12-29

    具体见(dir) - Org mode - Dates and times - Creating timestamps - The date/time promt

*** 语法: 时间repeate
    org-mode repeate格式
    +   .+   ++区别

    1. "+"
       backlog 可以积压的item
    2. ".+"
       specific date, no backlog 在特定日期完成的item
       ep: call mother
       每周六给mother打电话, 不可积压(或者说现在的操作不会影响之前)
    3. "++"
       specific interval, no backlog 在特定间隔完成的item
       ep: change batteries
       每隔1月更换电池, 不可积压
*** 语法: table计算
    @ 表示行； $表示列
    < 表示第一;   > 表示最后；

    例子:
    @<  第一行
    $>  最后一列
    @<< 第二行(更建议使用 @2)

    对table使用C-c} 可以查看行列值
    
*** ************************************************************
*** 如何优雅的refile
    虽然通过修改org-refile-tagets已经成功的完成了files间的node转移
    但是
    1. 在refile的时候，如何为node添加格式，比如"TODO" timestamp等
       解决方案 :: timestamp可以通过org-log-refile来实现
                   添加TODO暂时实现不了, refile好像不会改变source
                   现在的org-refile只能做到对target做出判断
                   暂时关闭该问题

    2. 如何快速在refile之间穿梭, 类似于capture的C-u C-c c
       解决方案 :: org-refile-goto-last-stored
                   类比 org-capture-goto-last-stored

** calendar  -mode
   1. sexq entry
      sexq entry是一种特殊的diary entry,支持elisp,且已经内置了很多函数和变量
      常用的有:
       	1) anniversary
       	2) block
       	3) cyclic
       	4) folating

   2. fancy-display 和 simple-display
      diary支持这2种显示日记方式
      一般都是使用fancy-display(官方推荐)

** *************************************************************
** 常用命令
   1. org-set-property      设置property
   2. customize-group       设置face属性
   3. package-list-packages 加载插件
      
* GNU
** gcc
    1. 查看搜索路径
	g++ | gcc -print-serach-dirs (可通过--help查看)
    2. 设定搜索路径
	gcc  C_INCLUDE_PATH
	g++  CPLUS_INCLUDE_PATH

	ep: export CPLUS_INCLUDE_PATH=/usr/lib/
	_扩展1_
	1. 输出 echo $C_INCLUDE_PATH
	2. 调用 $C_INCLUDE_PATH
	3. 赋值 export C_INCLUDE_PATH
	4. 删除变量 unset C_INCLUDE_PATH
	5. C++调用 string strValue(getenv("C_INCLUDE_PATH")
       
* ***********待归档*************
* 项目应用
** Java的一些基础
*** Activity
    Activity是 java中类的实例化
    
    activity存在于一些堆栈中, 似于线程的操作

    Activity必须在mainfest.xml中进行注册，才可以启动

    oncreate -- onstart -- onresume -- stop

    activity有显示启动和隐式启动
    
*** AndroidMainFest.xml
    类似于activity管理器的配置文件

    决定了哪个activity先启动， 决定了哪些activity可以启动
    
    inter-filter决定了activity是否是main activity，也决定了activity在什么情形下可以隐式启动
   
** shareSDK指导文档
*** 基本说明
    shareSDK是第三方插件(如果把微信,QQ等比作第一方), 其集成了很多平台, 可以实现快速接入

*** 操作步骤
    1. 在官网下载对应的SDK包
       包里面有Android工程 和 U3D(如果sdk是针对u3d)工程
    2. 编译Android工程, 为自己的U3D工程添加插件
       Android工程的编译目标是U3D的插件
    3. 在自己的U3D工程中 导入并修改官方的u3d Demo
    4. 完成

*** F&Q
    1. 问: 官方的android工程打不开?
       答: 根据不同的IDE, 有不同注意事项
       1) Eclisp IDE的时候, compiler和jdk版本要匹配
       2) Android stutio, 需要将工程import import
         官方的android工程是Eclisp的, 需要转换
    2. 问: Android Stutio如何编译官方的android工程?
       答: Android Stutio编译的时候需要有以下几个注意点
       1) 编译器gradlew版本
	  1) 修改工程下gradle/wrapper/gradle-wrapper.properties文件中的distributionUrl版本为4.1
	  2) 修改工程下build.gradle文件中的classpath版本为4.1 -- 只影响gradlew指令, 不修改也可以
       2) app文件的taget从a
	  pp改为android module
	  1) 修改工程下app/built.gradle文件中的plugin为apply plugin: 'com.android.library'
	  2) 删除工程下app/built.gradle文件中的applicationId -- 仅当application才有
       3) app文件的taget sdk版本修改
	  1) 修改工程下app/built.gradle文件中的compileSdkVersion和targetSdkVersion为21 (与安装的sdk版本匹配)
	  2) 修改工程下app/src/main/AndroidManifest.xml中的targetSdkVersion为21
	  3) 以上的sdk版本 应当与u3d编译时的选项一致
       4) app文件依赖性修改
	  修改工程下app/built.gradle文件中的dependence为implementation
	  具体原因, 详见Android Stutio的六种编译方式
       5) 包名的修改
	  1) 修改工程下app/src/main/Androidmanifest.xml中的manifest以及微信登录字段中的包名为your包名
	  2) 修改工程下app/src/main/java/cn/share/demo下的所有文件的包名前缀替换为your包名 -- 不需要修改目录名字
       6) 认证资质的修改
	  修改工程下app/src/main/Androidmanifest.xml中application字段中的Mob-AppKey和Mob-AppSecret为自己的
       7) rebuilt-project 完成
	  其余的东西无需改动；
	  生成的aar包在工程下app/build/outputs/aar/app-debug.aar；
	  生成的jar包在工程下app/build/intermidiates/bundles/debug/classes.jar
    3. 问: 自己的U3D工程如何与官方demo结合编译?
       答: 自己的U3D工程编译有以下几个注意点
       1) shareSDK插件的导入
	  1) 双击官方U3D工程中的ShareSDKForU3D.unitypackage (其实际就是将官方U3D工程下的Assets/Plugins导入到自己的U3D下)
	     不要导入demo.cs和ShareSDK-Unity.unity以及Plugins/Android/ShareSDK/DemoCallback.jar
	  2) 导入的时候需要注意路径问题, 比如正常的是Pligins/Android/ShareSDK/xml | libs | res, 千万不能写作Plugins/Android/xml
	     否则, 会导致自己U3D工程打包后没有图像...因为路径错了
	  3) 建议先删除自己的Plugins目录, 然后执行动作1)， 然后再将自己差异化的插件导入(注: 将android studio工程中lib下的jar包全部导入)
	  4) 将Android工程生成的classes.jar改名为com.quyou.tielinmajang.jar并copy到自己U3D工程下的Plugins/Android/ShareSDK/libs/
	  5) 将Android工程下AndroidManifest.xmlcopy到自己U3D工程下的Plugins/Android/ShareSDK/
       2) 修改资质认证
	  1) 官方的资质认证
	     1) Plugins/ShareSDK/ShareSDK.cs 有1处。 位置在成员变量处
	     2) Plugins/ShareSDK/ShareSDKConfig.cs 有1处。 位置在Config函数中
	  2) 微信登录的资质认证
	     1) Plugins/ShareSDK/ShareSDKDevInfo.cs 有1处。 位置在微信登录的函数中
       3) 选择使用平台
	  修改 Plugins/ShareSDK/ShareSDKDevInfo.cs 的成员变量。 不需要的平台直接注释相应的成员变量即可
       4) 调用ShareSDK的脚本文件
	  1) 官方的demo写的比较乱, 不推荐
	  2) 高手可以自己写
	  3) 可以直接使用之前的人写的 AuthAndShare.cs
       5) 将ShareSDK.cs和AuthAndShare.cs挂在控件上。 U3D基本功, 不详述, 只想吐槽
       6) 选择keyStore 编译。 完成
	  keystroe只影响签名
	  使用包名A,生成的apk其签名 应该与在微信开放平台上的包名A的签名一致

    4. 问题解答
       1) 问: U3D打包的时候出现 can't convert class to index
	  答: jar包问题, 排查jar包的依赖型是否都存在， 执行问题3中的1)中的3)
	  
*** 大坑
    1. 分享的content中 image url必须存在， 无论本地还是远端
       否则, 微信分享会调用失败
    2. shareSDK的脚本中的 byPass Approve 必须去掉勾选
       不勾选, 分享的webpage可能变为图片(应用信息)
	     
** 魔窗sdk接入
   :PROPERTIES:
   :ARCHIVE_TIME: 2017-12-30 Sat 13:16
   :ARCHIVE_FILE: ~/GTD/inbox.org
   :ARCHIVE_CATEGORY: inbox
   :END:
*** 魔窗简介
    一键入局
*** 流程
   1. 包名修改
      1) web控制后台
	 注意此处的包名 应该与微信的包名一致
      2) 代码的AndroidMainfest.xml 1处修改
      3) 工程下mlink_demo/src/java/main SplashActivity共1处
	 MainActivity 与 SecondActivity并没有使用到
   2. mlink key的修改
      1) web控制后台 2处修改
	 1) 假设web后台中的key 为tielingmajiang
	 2) 则在后台的url中应该写入 tielingmajiang?key1=:key1&key2=:key2
	    前面的tielingmajiang应该与key一致。?之后的为动态参数
      2) 跳转页面代码
	 已舍弃:_在注册函数register()中的key应该与web控制后台中的一致  1处修改_
	 最新版:不需要在 register()中修改, 只要修改 MlinkRouter即可
   3. 动态参数的修改
      1) web后台的配置  1处
	 1) URL中需要配置 为 XXX?key1=:key1&key2=:key2
      2) 跳转界面代码中的解析 1处
	 
* ************文档**************
* vargrind
  程序性能查看工具,号称程序员的瑞士军刀
  可以查看内存信息, 函数调用, cache信息等等
  
* helm
  1. helm-occur
     替代my-occur函数
  2. helm-buffers-list
     1) 输入 " @XX", 过滤掉buffer
     2) 在所要查找的buffer中, C-s 调用helm-occur
     3) 可以直接查找
  3. helm-browse-project
     绑定在了C-x C-b上
  4. helm-filtered-bookmarks
     查看书签(emacs register,永久)
     待使用 确认效果
  5. helm-mode
     1) helm-compilation
	helm-mode中重载了emacs的compilation
* 网络编程
  关注点:
  1. 阻塞问题
  2. 粘包问题 (tcp特有 -- 有边界但无法确认)
  3. 队列问题
     多线程处理
** 乱七八糟协议集合中的 socket 移到此处
** 原始socket问题
   1. 阻塞
      阻塞影响了并发
      方案:
      1) select
      2) poll
      3) epoll
   2. 粘包
      方案:
      1) 限制发送大小
      2) 每个消息增加长度标识
   3. 同步 异步
      client端, 与server关系不大
      同步: 等待结果返回; 返回之前无法操作
      异步: 等待结果返回, 返回之前可以自由活动
   4. 队列问题
      方案:
      多线程
** I/O模型
   [[https://mp.weixin.qq.com/s?src=11&timestamp=1565671711&ver=1787&signature=-mLkqQr803XDHb4f3aj9Lf1dJl8uVOV9fCCMMTzs0zSuOYH-qof7nsYCdgho1XLdPQYQP6QL5-WHtI6g-MD9xIsJcuxzdH*idpCZqtzl85r9D4C3XRRuOcCXqLKDzi-i&new=1][强烈建议阅读]]
   (链接过期, 直接搜狗搜索epoll, "epoll本质"即是)
   1. 阻塞式      
   2. 非阻塞
   3. 复合 -- select
   4. 复合 -- poll
   5. 复合 -- epoll (linux特有)
*** epoll本身为我们处理了什么
    1. 之前socket::recv()时, 导致我们的进程阻塞
    2. 现在socket::recv()时, 使epoll阻塞; epoll中断时, 告之进程
*** 有了epoll我们还需要处理什么
    1. 创建epoll对象
    2. 添加检视的fd对象 -- op, epoll_event 
    3. 检测是否有中断, 然后处理
* 多线程
* curses使用
  官方地址: http://www.tldp.org/HOWTO/NCURSES-Programming-HOWTO/windows.html
* fstream类
  文件操作类
  流程函数
  1. 构造fstream对象
     fstream file;
  2. 打开文件
     file.open(file_name, mode)
  3. 读文件
     1) file >> string file_val
	>> 遇到 空格 \n \r \t时候停止 -- 待确认TODONOW
     2) file.get(char ch)
	每次读取一个字符
     3) getline(file, string &file_val)
	读取一行, 遇到\n停止
     4) file.read(char*buf, length)
	在读指针位置读取length长度到buf中, 一般用于二进制文件
  4. 写文件
     1) file << file_val
	待确认TODONOW
     2) file.put(ch)
	写入一个字符
     3) file.write(char*buf, length)
	在写指针位置写入length长度的buf, 一般用户二进制文件
  5. 关闭文件
     file.close

     
  读写指针函数
  1. 获得读写指针位置
     TODONOW 待确认
  2. 设置读写指针函数
     1) 读: seekg(postion) //postion绝对位置
	一般用户文本文件
     2) 读: seekg(offset, ios::beg|ios::end::ios::cur) //offset相对位置
	一般用户二进制文件, 最好勿在文本文件中使用
     3) 写: seekp(positon)
	一般用户文本文件
     4) 写: seekp(offset, ios::beg|ios::end|ios::cur)
	一般用户二进制文件, 最好勿在文本文件中使用


  fstream状态函数
  1. if(file) 检验流是否有效
     这个需要重点查看下, 什么时候流会失效
     已知:
     1) file.eof()时候, file则会变为无效
  2. file.is_open() 流是否打开了文件
  3. file.eof() 是否到了文件尾
  4. file.clear()
     TODONOW 这个也需要再看下
     如果file.eof(), 调用clear可以重置标志;
     重置标识后, file重新变为有效流
* FILE
  FILE是C的文件操作 -- C++的为fstream
  问: 为什么有了fstream 还需要FILE?
  答: 很多系统函数,都是对C的支持, 比如popen()函数等

  1. fopen
  2. fread
  3. fwrite
  4. fclose
  
* string类
  1. 构造
  2. 比较
  3. 查找
  4. 插入
  5. 删除
  6. 
* C++ 与 shell的互相调用,传参,获取运行输出
